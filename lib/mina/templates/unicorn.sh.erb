#!/usr/bin/env bash
set -e

TIMEOUT=60
APP_ROOT="<%= "#{deploy_to!}/#{current_path!}" %>"
PID="<%= unicorn_pid %>"
ENVIRONMENT="<%= rails_env %>"
CONFIG="<%= unicorn_config %>"
# CMD="cd $APP_ROOT && rvm use 1.9.3 && /usr/local/bin/unicorn_rails -D -c $APP_ROOT/$CONFIG -E $ENVIRONMENT"
# CMD="bundle exec unicorn -D -c $APP_ROOT/$CONFIG -E $ENVIRONMENT"
# CMD="$APP_ROOT/bin/unicorn -D -c $APP_ROOT/$CONFIG -E $ENVIRONMENT"
UARGS="-D -c $CONFIG -E $ENVIRONMENT"
CMD="$APP_ROOT/bin/unicorn_rails $UARGS"
action="$1"
#set -u

export rvm_project_rvmrc=0
# export rvm_project_rvmrc=1
# export rvm_gemset_create_on_use_flag=1
export rvm_trust_rvmrcs_flag=1

<%= "source #{rvm_path}" unless rvm_string.nil? %>
cd $APP_ROOT || exit 1
<%= "rvm use #{rvm_string}" unless rvm_string.nil? %>

old_pid="$PID.oldbin"

# cd $APP_ROOT || exit 1

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $old_pid && kill -$1 `cat $old_pid`
}

workersig () {
  workerpid="$APP_ROOT/tmp/pids/unicorn.$2.pid"
  test -s "$workerpid" && kill -$1 `cat $workerpid`
}

case $action in
start)
  sig 0 && echo >&2 "Already running" && exit 0
  $CMD && echo "start ok" && exit 0
  ;;
stop)
  sig QUIT && echo "stop ok" && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && echo "force-stop ok" && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  sig HUP && echo "reloaded OK" && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  $CMD
  ;;
upgrade)
  sig USR2 && echo Upgraded && exit 0
  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
  $CMD
  ;;
# upgrade)
#   if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
#   then
#     n=$TIMEOUT
#     while test -s $old_pid && test $n -ge 0
#     do
#       printf '.' && sleep 1 && n=$(( $n - 1 ))
#     done
#     echo
# 
#     if test $n -lt 0 && test -s $old_pid
#     then
#       echo >&2 "$old_pid still exists after $TIMEOUT seconds"
#       exit 1
#     fi
#     exit 0
#   fi
#   echo >&2 "Couldn't upgrade, starting '$CMD' instead"
#   su -c "$CMD" - vagrant
#   ;;
kill_worker)
  workersig QUIT $2 && exit 0
  echo >&2 "Worker not running"
  ;;

reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
  exit 1
  ;;
esac

<%
# Sample file
# #!/bin/sh
# set -e
# # Example init script, this can be used with nginx, too,
# # since nginx and unicorn accept the same signals
# 
# # Feel free to change any of the following variables for your app:
# TIMEOUT=${TIMEOUT-60}
# APP_ROOT=/vagrant
# PID=$APP_ROOT/tmp/pids/unicorn.pid
# CMD="$APP_ROOT/bin/unicorn -D -c $APP_ROOT/config/unicorn.rb -E production"
# action="$1"
# set -u
# 
# old_pid="$PID.oldbin"
# 
# cd $APP_ROOT || exit 1
# 
# sig () {
#   test -s "$PID" && kill -$1 `cat $PID`
# }
# 
# oldsig () {
#   test -s $old_pid && kill -$1 `cat $old_pid`
# }
# 
# case $action in
# start)
#   sig 0 && echo >&2 "Already running" && exit 0
#   su -c "$CMD" - vagrant
#   ;;
# stop)
#   sig QUIT && exit 0
#   echo >&2 "Not running"
#   ;;
# force-stop)
#   sig TERM && exit 0
#   echo >&2 "Not running"
#   ;;
# restart|reload)
#   sig HUP && echo reloaded OK && exit 0
#   echo >&2 "Couldn't reload, starting '$CMD' instead"
#   su -c "$CMD" - vagrant
#   ;;
# upgrade)
#   if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
#   then
#     n=$TIMEOUT
#     while test -s $old_pid && test $n -ge 0
#     do
#       printf '.' && sleep 1 && n=$(( $n - 1 ))
#     done
#     echo
# 
#     if test $n -lt 0 && test -s $old_pid
#     then
#       echo >&2 "$old_pid still exists after $TIMEOUT seconds"
#       exit 1
#     fi
#     exit 0
#   fi
#   echo >&2 "Couldn't upgrade, starting '$CMD' instead"
#   su -c "$CMD" - vagrant
#   ;;
# reopen-logs)
#   sig USR1
#   ;;
# *)
#   echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
#   exit 1
#   ;;
# esac
%>